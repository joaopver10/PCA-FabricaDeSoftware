# Generated by Django 5.0.6 on 2024-06-18 16:28

import core.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Materias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('materia', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Questoes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pergunta', models.TextField()),
                ('criado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Questões',
            },
        ),
        migrations.CreateModel(
            name='CustomUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('is_student', models.BooleanField(default=False, verbose_name='Aluno status')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='Professor status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name_plural': 'Professores',
            },
        ),
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('matricula', models.AutoField(primary_key=True, serialize=False)),
                ('nome', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('sexo', models.CharField(max_length=20)),
                ('dataNasc', models.CharField(max_length=10)),
                ('localNasc', models.CharField(max_length=30, null=True)),
                ('nomeResponsavel', models.CharField(max_length=30)),
                ('tel', models.CharField(max_length=15)),
                ('cep', models.CharField(max_length=10)),
                ('logr', models.CharField(max_length=50)),
                ('uf', models.CharField(max_length=2)),
                ('numero', models.CharField(max_length=5)),
                ('bairro', models.CharField(max_length=30)),
                ('cidade', models.CharField(max_length=30)),
                ('complemento', models.CharField(max_length=30, null=True)),
                ('turma', models.CharField(max_length=10)),
                ('turno', models.CharField(max_length=20)),
                ('ano', models.CharField(max_length=4)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.professor', verbose_name='Professor_id')),
            ],
            options={
                'verbose_name_plural': 'Alunos',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField()),
                ('correto', models.BooleanField(default=False)),
                ('criado', models.DateTimeField(auto_now=True)),
                ('questao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.questoes')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=120)),
                ('topico', models.CharField(max_length=120)),
                ('num_de_questoes', models.IntegerField()),
                ('tempo', models.IntegerField(help_text='Duração do quiz em minutos')),
                ('pts_necessarios', models.IntegerField(help_text='Pontuação necessária em %')),
                ('dificuldade', models.CharField(max_length=8)),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.materias')),
            ],
            options={
                'verbose_name_plural': 'Quizes',
            },
        ),
        migrations.AddField(
            model_name='questoes',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quiz'),
        ),
        migrations.CreateModel(
            name='Resultado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pontos', models.FloatField()),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quiz')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.aluno')),
            ],
            options={
                'verbose_name_plural': 'Resultados',
            },
        ),
    ]
